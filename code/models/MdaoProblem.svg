<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 9.0.0 (0)
 -->
<!-- Title: Entity Relationship Diagram Pages: 1 -->
<svg width="534pt" height="239pt"
 viewBox="0.00 0.00 534.00 238.50" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 234.5)">
<title>Entity Relationship Diagram</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-234.5 530,-234.5 530,4 -4,4"/>
<text text-anchor="middle" x="263" y="-5.95" font-family="Times New Roman,serif" font-size="9.00" fill="#a8a8a8">Created by erdantic v0.6.0 &lt;https://github.com/drivendataorg/erdantic&gt;</text>
<!-- pypsse.models.MdaoInput -->
<g id="node1" class="node">
<title>pypsse.models.MdaoInput</title>
<g id="a_node1"><a xlink:title="pypsse.models.MdaoInput&#10;&#10;Usage docs: https://docs.pydantic.dev/2.5/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="265,-106.5 265,-128.5 510,-128.5 510,-106.5 265,-106.5"/>
<text text-anchor="start" x="354.12" y="-113.2" font-family="Times New Roman,serif" font-weight="bold" font-size="14.00">MdaoInput</text>
<polygon fill="none" stroke="black" points="265,-84.5 265,-106.5 327,-106.5 327,-84.5 265,-84.5"/>
<text text-anchor="start" x="267.88" y="-90.2" font-family="Times New Roman,serif" font-size="14.00">asset_type</text>
<polygon fill="none" stroke="black" points="327,-84.5 327,-106.5 510,-106.5 510,-84.5 327,-84.5"/>
<text text-anchor="start" x="329.62" y="-90.2" font-family="Times New Roman,serif" font-size="14.00">WritableModelTypes(str, Enum)</text>
<polygon fill="none" stroke="black" points="265,-62.5 265,-84.5 327,-84.5 327,-62.5 265,-62.5"/>
<text text-anchor="start" x="270.12" y="-68.2" font-family="Times New Roman,serif" font-size="14.00">asset_bus</text>
<polygon fill="none" stroke="black" points="327,-62.5 327,-84.5 510,-84.5 510,-62.5 327,-62.5"/>
<text text-anchor="start" x="411.38" y="-68.2" font-family="Times New Roman,serif" font-size="14.00">int</text>
<polygon fill="none" stroke="black" points="265,-40.5 265,-62.5 327,-62.5 327,-40.5 265,-40.5"/>
<text text-anchor="start" x="274.25" y="-46.2" font-family="Times New Roman,serif" font-size="14.00">asset_id</text>
<polygon fill="none" stroke="black" points="327,-40.5 327,-62.5 510,-62.5 510,-40.5 327,-40.5"/>
<text text-anchor="start" x="411.75" y="-46.2" font-family="Times New Roman,serif" font-size="14.00">str</text>
<polygon fill="none" stroke="black" points="265,-18.5 265,-40.5 327,-40.5 327,-18.5 265,-18.5"/>
<text text-anchor="start" x="270.88" y="-24.2" font-family="Times New Roman,serif" font-size="14.00">attributes</text>
<polygon fill="none" stroke="black" points="327,-18.5 327,-40.5 510,-40.5 510,-18.5 327,-18.5"/>
<text text-anchor="start" x="403.88" y="-24.2" font-family="Times New Roman,serif" font-size="14.00">dict[]</text>
</a>
</g>
</g>
<!-- pypsse.models.MdaoOutput -->
<g id="node2" class="node">
<title>pypsse.models.MdaoOutput</title>
<g id="a_node2"><a xlink:title="pypsse.models.MdaoOutput&#10;&#10;Usage docs: https://docs.pydantic.dev/2.5/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="249,-208.5 249,-230.5 526,-230.5 526,-208.5 249,-208.5"/>
<text text-anchor="start" x="348.88" y="-215.2" font-family="Times New Roman,serif" font-weight="bold" font-size="14.00">MdaoOutput</text>
<polygon fill="none" stroke="black" points="249,-186.5 249,-208.5 307,-208.5 307,-186.5 249,-186.5"/>
<text text-anchor="start" x="263" y="-192.2" font-family="Times New Roman,serif" font-size="14.00">buses</text>
<polygon fill="none" stroke="black" points="307,-186.5 307,-208.5 526,-208.5 526,-186.5 307,-186.5"/>
<text text-anchor="start" x="394.38" y="-192.2" font-family="Times New Roman,serif" font-size="14.00">List[int]</text>
<polygon fill="none" stroke="black" points="249,-164.5 249,-186.5 307,-186.5 307,-164.5 249,-164.5"/>
<text text-anchor="start" x="251.75" y="-170.2" font-family="Times New Roman,serif" font-size="14.00">quantities</text>
<polygon fill="none" stroke="black" points="307,-164.5 307,-186.5 526,-186.5 526,-164.5 307,-164.5"/>
<text text-anchor="start" x="309.62" y="-170.2" font-family="Times New Roman,serif" font-size="14.00">Dict[ModelTypes(str, Enum), List[str]]</text>
</a>
</g>
</g>
<!-- pypsse.models.MdaoProblem -->
<g id="node3" class="node">
<title>pypsse.models.MdaoProblem</title>
<g id="a_node3"><a xlink:title="pypsse.models.MdaoProblem&#10;&#10;Usage docs: https://docs.pydantic.dev/2.5/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="0,-190.5 0,-212.5 141,-212.5 141,-190.5 0,-190.5"/>
<text text-anchor="start" x="28.12" y="-197.2" font-family="Times New Roman,serif" font-weight="bold" font-size="14.00">MdaoProblem</text>
<polygon fill="none" stroke="black" points="0,-168.5 0,-190.5 45,-190.5 45,-168.5 0,-168.5"/>
<text text-anchor="start" x="2.62" y="-174.2" font-family="Times New Roman,serif" font-size="14.00">outputs</text>
<polygon fill="none" stroke="black" points="45,-168.5 45,-190.5 141,-190.5 141,-168.5 45,-168.5"/>
<text text-anchor="start" x="58.12" y="-174.2" font-family="Times New Roman,serif" font-size="14.00">MdaoOutput</text>
<polygon fill="none" stroke="black" points="0,-146.5 0,-168.5 45,-168.5 45,-146.5 0,-146.5"/>
<text text-anchor="start" x="6" y="-152.2" font-family="Times New Roman,serif" font-size="14.00">inputs</text>
<polygon fill="none" stroke="black" points="45,-146.5 45,-168.5 141,-168.5 141,-146.5 45,-146.5"/>
<text text-anchor="start" x="47.62" y="-152.2" font-family="Times New Roman,serif" font-size="14.00">List[MdaoInput]</text>
</a>
</g>
</g>
<!-- pypsse.models.MdaoProblem&#45;&gt;pypsse.models.MdaoInput -->
<g id="edge1" class="edge">
<title>pypsse.models.MdaoProblem:e&#45;&gt;pypsse.models.MdaoInput:w</title>
<path fill="none" stroke="black" d="M141,-157.5C190.78,-157.5 203.3,-127.28 243.33,-119.38"/>
<polygon fill="black" stroke="black" points="253.21,-118.46 263.58,-122.01 258.52,-117.96 262.83,-117.56 262.83,-117.56 262.83,-117.56 258.52,-117.96 262.75,-113.05 253.21,-118.46"/>
<ellipse fill="none" stroke="black" cx="247.52" cy="-118.99" rx="4" ry="4"/>
</g>
<!-- pypsse.models.MdaoProblem&#45;&gt;pypsse.models.MdaoOutput -->
<g id="edge2" class="edge">
<title>pypsse.models.MdaoProblem:e&#45;&gt;pypsse.models.MdaoOutput:w</title>
<path fill="none" stroke="black" d="M141,-179.5C186.79,-179.5 196.12,-211.51 234.22,-218.26"/>
<polyline fill="none" stroke="black" points="249,-219.5 244.02,-219.08"/>
<polygon fill="black" stroke="black" points="243.44,-214.02 242.6,-223.98 240.61,-223.81 241.45,-213.85 243.44,-214.02"/>
<polyline fill="none" stroke="black" points="244.02,-219.08 239.04,-218.66"/>
<polygon fill="black" stroke="black" points="238.46,-213.6 237.62,-223.56 235.63,-223.39 236.46,-213.43 238.46,-213.6"/>
<polyline fill="none" stroke="black" points="239.04,-218.66 234.05,-218.25"/>
</g>
</g>
</svg>
