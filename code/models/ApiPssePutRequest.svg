<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 9.0.0 (0)
 -->
<!-- Title: Entity Relationship Diagram Pages: 1 -->
<svg width="2559pt" height="181pt"
 viewBox="0.00 0.00 2559.00 180.50" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 176.5)">
<title>Entity Relationship Diagram</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-176.5 2555,-176.5 2555,4 -4,4"/>
<text text-anchor="middle" x="1275.5" y="-5.95" font-family="Times New Roman,serif" font-size="9.00" fill="#a8a8a8">Created by erdantic v0.6.0 &lt;https://github.com/drivendataorg/erdantic&gt;</text>
<!-- pypsse.models.ApiAssetQuery -->
<g id="node1" class="node">
<title>pypsse.models.ApiAssetQuery</title>
<g id="a_node1"><a xlink:title="pypsse.models.ApiAssetQuery&#10;&#10;Usage docs: https://docs.pydantic.dev/2.5/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="325,-84.5 325,-106.5 2551,-106.5 2551,-84.5 325,-84.5"/>
<text text-anchor="start" x="1393.38" y="-91.2" font-family="Times New Roman,serif" font-weight="bold" font-size="14.00">ApiAssetQuery</text>
<polygon fill="none" stroke="black" points="325,-62.5 325,-84.5 409,-84.5 409,-62.5 325,-62.5"/>
<text text-anchor="start" x="338.88" y="-68.2" font-family="Times New Roman,serif" font-size="14.00">asset_type</text>
<polygon fill="none" stroke="black" points="409,-62.5 409,-84.5 2551,-84.5 2551,-62.5 409,-62.5"/>
<text text-anchor="start" x="1414.75" y="-68.2" font-family="Times New Roman,serif" font-size="14.00">ModelTypes(str, Enum)</text>
<polygon fill="none" stroke="black" points="325,-40.5 325,-62.5 409,-62.5 409,-40.5 325,-40.5"/>
<text text-anchor="start" x="327.62" y="-46.2" font-family="Times New Roman,serif" font-size="14.00">asset_property</text>
<polygon fill="none" stroke="black" points="409,-40.5 409,-62.5 2551,-62.5 2551,-40.5 409,-40.5"/>
<text text-anchor="start" x="412" y="-46.2" font-family="Times New Roman,serif" font-size="14.00">Optional[BusProperties(str, Enum), AreaProperties(str, Enum), ZoneProperties(str, Enum), StationProperties(str, Enum), DCLineProperties(str, Enum), LoadProperties(str, Enum), FixedShuntProperties(str, Enum), SwitchedShuntProperties(str, Enum), TransformerProperties(str, Enum), BranchProperties(str, Enum), InductionGeneratorProperties(str, Enum), MachinesProperties(str, Enum)]</text>
<polygon fill="none" stroke="black" points="325,-18.5 325,-40.5 409,-40.5 409,-18.5 325,-18.5"/>
<text text-anchor="start" x="345.25" y="-24.2" font-family="Times New Roman,serif" font-size="14.00">asset_id</text>
<polygon fill="none" stroke="black" points="409,-18.5 409,-40.5 2551,-40.5 2551,-18.5 409,-18.5"/>
<text text-anchor="start" x="1445.12" y="-24.2" font-family="Times New Roman,serif" font-size="14.00">Optional[str]</text>
</a>
</g>
</g>
<!-- pypsse.models.ApiPssePutRequest -->
<g id="node2" class="node">
<title>pypsse.models.ApiPssePutRequest</title>
<g id="a_node2"><a xlink:title="pypsse.models.ApiPssePutRequest&#10;&#10;Usage docs: https://docs.pydantic.dev/2.5/concepts/models/&#10;&#10;A base class for creating Pydantic models.&#10;&#10;Attributes:&#10; &#160;&#160;&#160;__class_vars__: The names of classvars defined on the model.&#10; &#160;&#160;&#160;__private_attributes__: Metadata about the private attributes of the model.&#10; &#160;&#160;&#160;__signature__: The signature for instantiating the model.&#10;&#10; &#160;&#160;&#160;__pydantic_complete__: Whether model building is completed, or if there are still undefined fields.&#10; &#160;&#160;&#160;__pydantic_core_schema__: The pydantic&#45;core schema used to build the SchemaValidator and SchemaSerializer.&#10; &#160;&#160;&#160;__pydantic_custom_init__: Whether the model has a custom `__init__` function.&#10; &#160;&#160;&#160;__pydantic_decorators__: Metadata containing the decorators defined on the model.&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.&#10; &#160;&#160;&#160;__pydantic_generic_metadata__: Metadata for generic models; contains data used for a similar purpose to&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;__args__, __origin__, __parameters__ in typing&#45;module generics. May eventually be replaced by these.&#10; &#160;&#160;&#160;__pydantic_parent_namespace__: Parent namespace of the model, used for automatic rebuilding of models.&#10; &#160;&#160;&#160;__pydantic_post_init__: The name of the post&#45;init method for the model, if defined.&#10; &#160;&#160;&#160;__pydantic_root_model__: Whether the model is a `RootModel`.&#10; &#160;&#160;&#160;__pydantic_serializer__: The pydantic&#45;core SchemaSerializer used to dump instances of the model.&#10; &#160;&#160;&#160;__pydantic_validator__: The pydantic&#45;core SchemaValidator used to validate instances of the model.&#10;&#10; &#160;&#160;&#160;__pydantic_extra__: An instance attribute with the values of extra fields from validation when&#10; &#160;&#160;&#160;&#160;&#160;&#160;&#160;`model_config[&#39;extra&#39;] == &#39;allow&#39;`.&#10; &#160;&#160;&#160;__pydantic_fields_set__: An instance attribute with the names of fields explicitly set.&#10; &#160;&#160;&#160;__pydantic_private__: Instance attribute with the values of private attributes set on the model instance.&#10;">
<polygon fill="none" stroke="black" points="0,-150.5 0,-172.5 217,-172.5 217,-150.5 0,-150.5"/>
<text text-anchor="start" x="52.25" y="-157.2" font-family="Times New Roman,serif" font-weight="bold" font-size="14.00">ApiPssePutRequest</text>
<polygon fill="none" stroke="black" points="0,-128.5 0,-150.5 66,-150.5 66,-128.5 0,-128.5"/>
<text text-anchor="start" x="21" y="-134.2" font-family="Times New Roman,serif" font-size="14.00">uuid</text>
<polygon fill="none" stroke="black" points="66,-128.5 66,-150.5 217,-150.5 217,-128.5 66,-128.5"/>
<text text-anchor="start" x="124.62" y="-134.2" font-family="Times New Roman,serif" font-size="14.00">UUID</text>
<polygon fill="none" stroke="black" points="0,-106.5 0,-128.5 66,-128.5 66,-106.5 0,-106.5"/>
<text text-anchor="start" x="5.62" y="-112.2" font-family="Times New Roman,serif" font-size="14.00">command</text>
<polygon fill="none" stroke="black" points="66,-106.5 66,-128.5 217,-128.5 217,-106.5 66,-106.5"/>
<text text-anchor="start" x="68.75" y="-112.2" font-family="Times New Roman,serif" font-size="14.00">ApiCommands(str, Enum)</text>
<polygon fill="none" stroke="black" points="0,-84.5 0,-106.5 66,-106.5 66,-84.5 0,-84.5"/>
<text text-anchor="start" x="3" y="-90.2" font-family="Times New Roman,serif" font-size="14.00">parameters</text>
<polygon fill="none" stroke="black" points="66,-84.5 66,-106.5 217,-106.5 217,-84.5 66,-84.5"/>
<text text-anchor="start" x="71.38" y="-90.2" font-family="Times New Roman,serif" font-size="14.00">Optional[ApiAssetQuery]</text>
</a>
</g>
</g>
<!-- pypsse.models.ApiPssePutRequest&#45;&gt;pypsse.models.ApiAssetQuery -->
<g id="edge1" class="edge">
<title>pypsse.models.ApiPssePutRequest:e&#45;&gt;pypsse.models.ApiAssetQuery:w</title>
<path fill="none" stroke="black" d="M217,-95.5C258.06,-95.5 272.78,-95.5 306.23,-95.5"/>
<polyline fill="none" stroke="black" points="325,-95.5 320,-95.5"/>
<polygon fill="black" stroke="black" points="319,-90.5 319,-100.5 317,-100.5 317,-90.5 319,-90.5"/>
<polyline fill="none" stroke="black" points="320,-95.5 315,-95.5"/>
<ellipse fill="none" stroke="black" cx="310.5" cy="-95.5" rx="4" ry="4"/>
</g>
</g>
</svg>
