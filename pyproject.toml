[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "NREL-pypsse"
dynamic = ["version"]
description = "A high-level python interface for PSS/E"
readme = "README.md"
license = "BSD-3-Clause"
requires-python = ">=3.8"

authors = [
    { name = "Aadil Latif", email = "Aadil.Latif@nrel.gov" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
]
dependencies = [

    "click",
    "h5py",
    "helics",
    "networkx",
    "numpy",
    "pandas",
    "pydantic~=2.4",
    "PyYAML",
    "requests",
    "terminaltables",
    "toml",
    "xlrd"
]

[project.scripts]
pypsse = "pypsse.cli.pypsse:cli"

[project.urls]
Homepage = "http://www.github.com/nrel/pypsse"

[tool.hatch.version]
path = "pypsse/__init__.py"

[tool.hatch.envs.test]
dependencies = [
  "coverage[toml]",
  "pytest",
  "pytest-cov",
  "pytest-mock",
]

[tool.hatch.build.targets.sdist]
include = [
    "/pypsse",
]

[tool.hatch.build.targets.wheel]
packages = [
    "pypsse"
]

[project.optional-dependencies]
doc = [
  "mkdocs",
  "mkdocs-material",
  "mkdocstrings[python]",
  "pygraphviz",
  "erdantic",
  "mdutils",
  "mkdocs-glightbox",
  "mkdocs-click",
  "mkdocs-table-reader-plugin",
  "mkdocs-video",
  "neoteroi-mkdocs",
]
dev = [
  "pylint",
  "mypy",
  "black"
]
server = [
  "uvicorn[standard]",
  "fastapi",
  "websockets",
  "python-multipart"
]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]



[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/autogradinglean tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.black]
target-version = ["py37"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py37"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S101", "S105", "S106", "S107", "RUF012", "PLR5501",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  "N805", "B006", "FBT002"

]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["autogradinglean"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]